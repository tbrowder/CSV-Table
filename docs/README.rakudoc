=begin pod

=head1 NAME

B<CSV::Table> - Provides routines for querying a CSV file with a header row

=head1 SYNOPSIS

=begin code :lang<raku>
use CSV::Table;
my $t = CSV::Table.new: :csv($my-csv-file);
say $t.num-fields;
say $t.num-data-row;
=end code

=head1 DESCRIPTION

B<CSV::Table> is a class enabling access to a CSV table's
contents. Currently it handles only tables with a header
row with unique field names. 

By default, the contents of
all unquoted text is 'normalized', that is, it is trimmed
of leading and trailing whitespace and multiple contiguous
interior whitespaces are collapsed into single ones.

Quote characters must be balanced, and quoted text may be normalzed
if the user so desires. The following table shows the recognized
quote pairs.

=begin table
Left quote | Right quote
-----------+------------
U+0022  \x0022  | U+0022  9
U+0027  9  | U+0027  9
U+0018  9  | U+0019  9
U+201C  9  | U+201D  9
=end table

=begin table
Unicode hex code | Unicode name
-----------------+-------------
U+0022 | QUOTATION MARK 
U+0027 | APOSTROPHE   
U+0018 | LEFT SINGLE QUOTATION MARK 
U+0019 | RIGHT SINGLE QUOTATION MARK  
U+201C | LEFT DOUBLE QUOTATION MARK 
U+201D | RIGHT DOUBLE QUOTATION MARK  
=end table

NOTE: Newlines are B<not> currently handled. 

It includes a very simple CSV file reader and parser. It is intended
as a makeshift CSV file reader for use until other available modules
can be made to test successfully with B<Github workflows> as well as
handle:

=item header lines with an ending empty field
=item data lines with trailing whitespace.
=item normalizing field names

This class B<CAN> handle those successfully.

As simple as it is, it also has some features that are very useful:

=begin item
Comment lines are allowed

This feature, which is not usual in CSV parsers, is to ignore comment
lines which may have leading whitespace, but it and data at or after a
comment character are ignored so the line is treated as a blank
line. The comment character is user-definable but must not conflict
with the chosen field separator.

=end item

=begin item
Text normalization

Its results are to normalize text in a field, that is: leading and
trailing whitespace is trimmed and interior whitespace is collapsed to
one space between words.  This is the default behavior but can be
turned off if desired (C<normalize=False>).
=end item

=begin item
Automatic determination of separator character

The header line is searched for the most-used separator character from
this list: C<|>, C<;>, and C<,>.  Other non-space characters may be used
but are probably not tested. File an issue if you want to use a
separator not currently specified.
=end item

=head2 Limitations

It cannot currently handle:

=item files without a header line (results are untested)
=item special characters
=item backslashes
=item non-text data
=item named line endings
=item multi-line fields (i.e., embedded newlines)
=item duplicate field names

=head2 Constructor signature

=begin code
CSV::Table.new: :$csv, :separator='auto', :trim=True, :normalize=True, :comment-char='#'
=end code

Following are the allowable values for the named arguments. The user
is cautioned that unspecified values are probably not tested. File an
issue if your value of choice is not specified, and it can be added
and tested for.

=item C<:$separator>
=item2 auto [default]
=item2 comma (C<,>)
=item2 pipe (C<|>)
=item2 semicolon (C<;>)

=item C<:$normalize>
=item2 C<True> [default]
=item2 C<False>

=item C<:$comment-char>
=item2 C<#> [default]
=item2 others, including multiple characters, are possible

=head2 Accessing the table

The following table shows how to access each cell in a table C<$t>
with a header row plus C<R> rows and C<C> columns of data.
(In matrix terminology it is an C<M x N> rectangular matrix with C<M> rows and C<N> columns.)

=begin table
$t.field[0] | ... | $t.field[C-1]
$t.cell[0][0] | ... | $t.cell[0][C-1]
...         | ... | ...
$t.cell[R-1][0] | ... | $t.cell[R-1][C-1]
=end table

The table's data cells can also be accessed by field name and row number:

=begin code
$t.col{$field-name}{$row-number}
=end code

=head1 AUTHOR

Tom Browder <tbrowder@acm.org>

=head1 COPYRIGHT AND LICENSE

Â© 2024 Tom Browder

This library is free software; you may redistribute it or modify it under the Artistic License 2.0.

=end pod
