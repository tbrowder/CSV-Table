=begin pod

=head1 NAME

B<CSV::Parser::Simple> - A simple CSV file reader

=head1 SYNOPSIS

=begin code :lang<raku>

use CSV::Parser::Simple;
my $parser = CSV::Parser::Simple.new: $csv-file-name;
=end code

=head1 DESCRIPTION

B<Text::CSV::Simple> is a very simple CSV file reader and parser. It is
intended as a makeshift CSV file reader for my use until other available 
modules can be made to test successfully with B<Github workflows> 
as well as handle:

=item header lines with an ending empty field
=item data lines with trailing whitespace.
=item normalizing field names

As simple as it is, it does have some features that are very useful:

=begin item
Comment lines are allowed

This feature, which is not usual in CSV parsers, is to ignore comment lines which
may have leading whitespace, but it and data at or after a comment character are ignored
so the line is treated as a blank line. The comment character is user-definable but
must not conflict with the chosen field separator.
=end item

=begin item
Text normalization

Its results are to normalize text in a field, that is: leading and trailing whitespace
is trimmed and interior whitespace is collapsed to one space between words.
This is the default behavior but can be turned off if desired (C<normalize=False>).
=end item

=begin item
Automatic determination of separator character

The header line is searched for the most-used separator
character from this list: C<|>, C<;>, C<,>.
=end item

=head2 Limitations

It cannot handle:

=item files without a header line (results are untested)
=item special characters
=item backslashes 
=item non-text data 
=item quoted words
=item named line endings 
=item multi-line fields

=head2 Constructor signature

=begin code
new($csv-file-name, :separator='auto', :normalize=True, :comment-char='#')
=end code

Following are the allowable values for the named arguments. The user is cautioned
that unspecified values are probably not tested. File an issue if your value
of choice is not specified, and it can be added and tested for.

=item C<:$separator>
=item2 auto [default]
=item2 comma (C<,>) 
=item2 pipe (C<|>)
=item2 semicolon (C<;>)

=item C<:$normalize>
=item2 C<True> [default]
=item2 C<False>

=item C<:$comment-char>
=item2 C<#> [default]
=item2 others, including multiple characters, are possible

=head1 AUTHOR

Tom Browder <tbrowder@acm.org>

=head1 COPYRIGHT AND LICENSE

Â© 2024 Tom Browder

This library is free software; you may redistribute it or modify it under the Artistic License 2.0.

=end pod
